#!/bin/bash

set -o pipefail

declare -r -i DEFAULT_NUM_QUERIES=100
declare -i NUM_QUERIES=${DEFAULT_NUM_QUERIES}

declare -r DEFAULT_BURST_SIZE=14
declare BURST_SIZE=${DEFAULT_BURST_SIZE}

declare -r DEFAULT_NUM_WORKERS=100
declare NUM_WORKERS=${DEFAULT_NUM_WORKERS}

declare SANDBOX=off

declare -r -i DEFAULT_CPUS=100
declare -i CPUS=${DEFAULT_CPUS}
declare -r DEFAULT_MEMORY=100G
declare MEMORY="${DEFAULT_MEMORY}"

declare -r DEFAULT_QPS="10:5:100"
declare QPS="${DEFAULT_QPS}"

declare -r DEFAULT_MODE="byob"
declare MODE="${DEFAULT_MODE}"
declare -r DEFAULT_UDF_PATH="src/roma/tools/v8_cli/test_udfs/simple_udf.js"
declare UDF_PATH="${DEFAULT_UDF_PATH}"
declare -r DEFAULT_HANDLER_NAME="Handler"
declare HANDLER_NAME="${DEFAULT_HANDLER_NAME}"

declare -r DEFAULT_INPUT_ARGS=""
declare INPUT_ARGS="${DEFAULT_INPUT_ARGS}"

declare -r DEFAULT_OUTPUT_FILE=""
declare OUTPUT_FILE="${DEFAULT_OUTPUT_FILE}"

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr << USAGE
usage:
  $0 <options>
  Traffic generator settings:
    --num-queries <int>        number of queries to execute. Default: ${DEFAULT_NUM_QUERIES}.
    --burst-size <range>         number of RPCs within a burst. Default: ${DEFAULT_BURST_SIZE}.
    --num-workers <range>      number of workers to execute, as an integer or a range (min:increment:max or min:max). Default: ${DEFAULT_NUM_WORKERS}.
    --num-qps <range>          queries per second, as an integer or a range (min:increment:max or min:max). Default: ${DEFAULT_QPS}.
    --mode <string>           traffic generator mode: 'byob' or 'v8'. Default: byob
    --output-file <string>    path to output JSON. Default: print to stdout.

  V8 Mode settings:
    --udf-path <string>      path to JavaScript UDF file. Default: ${DEFAULT_UDF_PATH}
    --handler-name <string>  name of the handler function to call. Default: ${DEFAULT_HANDLER_NAME}
    --input-args <string>    comma-separated arguments to pass to the handler function. Default: ${DEFAULT_INPUT_ARGS}

  Container settings:
    --cpus <int>               CPU count allocated to the container. Default: ${DEFAULT_CPUS}.
    --memory <value>           memory to allocate to the container. Default: ${DEFAULT_MEMORY}.

  where <range> should be one of:
    * a single integer
    * two or three integers, colon-delimited. The colons are replaced with whitespace, then passed
      as arguments to the seq program. Therefore, the range value should be one of:
        * a string with two integers "a:b" where a <= b
        * a string with three integers "a:x:c" where a <= b, and x is the increment

USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --num-queries) NUM_QUERIES=$2; shift 2 || usage 1 ;;
    --burst-size) BURST_SIZE="$2"; shift 2 || usage 1 ;;
    --num-workers) NUM_WORKERS="$2"; shift 2 || usage 1 ;;
    --num-qps) QPS="$2"; shift 2 || usage 1 ;;
    --mode) MODE="$2"; shift 2 || usage 1 ;;

    --cpus) CPUS=$2; shift 2 || usage 1 ;;
    --memory) MEMORY="$2"; shift 2 || usage 1 ;;

    --udf-path) UDF_PATH="$2"; shift 2 || usage 1 ;;
    --handler-name) HANDLER_NAME="$2"; shift 2 || usage 1 ;;
    --input-args) INPUT_ARGS="$2"; shift 2 || usage 1 ;;
    --output-file) OUTPUT_FILE="$2"; shift 2 || usage 1 ;;
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      ;;
  esac
done


IMAGE=privacy-sandbox/roma-byob/traffic_generator:v1-root
TRAFFIC_GENERATOR_PATH="src/roma/byob/benchmark:traffic_generator"

declare -i FAILURE_COUNT=0
declare -r -i MAX_FAILURES=1

declare -a -r DOCKER_ARGS=(
  "--privileged"
  "--cpus=${CPUS}"
  "--memory=${MEMORY}"
)

function run_test() {
  declare -r -i burst_size=$1; shift
  declare -r -i qps=$1; shift
  declare -r -i num_workers=$1; shift
  printf "running qps: %d\n" ${qps}

  declare -a CMD_ARGS=(
    "--burst_size=${burst_size}"
    "--num_queries=${NUM_QUERIES}"
    "--num_workers=${num_workers}"
    "--queries_per_second=${qps}"
    "--mode=${MODE}"
    "--output_file=${OUTPUT_FILE}"
  )

  if [[ ${MODE} == v8 ]]; then
    if [[ -n ${UDF_PATH} ]]; then
      CMD_ARGS+=("--udf_path=${UDF_PATH}")
    fi
    if [[ -n ${HANDLER_NAME} ]]; then
      CMD_ARGS+=("--handler_name=${HANDLER_NAME}")
    fi
    if [[ -n ${INPUT_ARGS} ]]; then
      CMD_ARGS+=("--input_args=${INPUT_ARGS}")
    fi
  else
    CMD_ARGS+=("--sandbox=${SANDBOX}")
  fi

  set -o xtrace
  if [[ "${MODE}" == "v8" ]]; then
    if ! builders/tools/bazel-debian run \
      "${TRAFFIC_GENERATOR_PATH}" \
      -- \
      "${CMD_ARGS[@]}" 2>&1 | grep -Ev "sandbox.cc|monitor_base.cc|sandbox2.cc"; then
      FAILURE_COUNT=$((FAILURE_COUNT+1))
    fi
  else
    if ! docker run \
      "${DOCKER_ARGS[@]}" \
      "${IMAGE}" \
      "${CMD_ARGS[@]}"; then
      FAILURE_COUNT=$((FAILURE_COUNT+1))
    fi
  fi
}

function check_range() {
  declare -n _val=$1
  if [[ ${_val} -ge 0 ]] 2>/dev/null; then
    _val="${_val}:${_val}"
  fi
}

check_range QPS
check_range NUM_WORKERS
check_range BURST_SIZE

set -o xtrace
# shellcheck disable=SC2086,SC2207
declare -a QPS_LIST=($(seq ${QPS//:/ }))
# shellcheck disable=SC2086,SC2207
declare -a NUM_WORKERS_LIST=($(seq ${NUM_WORKERS//:/ }))
# shellcheck disable=SC2086,SC2207
declare -a BURST_SIZE_LIST=($(seq ${BURST_SIZE//:/ }))

declare -i qps num_workers burst_size
for qps in "${QPS_LIST[@]}"; do
  for num_workers in "${NUM_WORKERS_LIST[@]}"; do
    for burst_size in "${BURST_SIZE_LIST[@]}"; do
      run_test ${burst_size} ${qps} ${num_workers}
      if [[ ${FAILURE_COUNT} -ge ${MAX_FAILURES} ]]; then
        printf "%d failures. Exiting\n" ${FAILURE_COUNT}
        exit 1
      fi
    done
  done
done
